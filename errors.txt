document.addEventListener('DOMContentLoaded', () => {
  const sections = ['home', 'product', 'tshirts', 'hoodies'];
  let currentSectionIndex = 0;
  let isScrolling = false;
  const mouseScrollDuration = 1200; // Duration for mouse scroll events
  const otherScrollDuration = 300;  // Duration for other scroll events

  function initializeCurrentSectionIndex() {
    const currentSection = sections.findIndex(sectionId => {
      const section = document.getElementById(sectionId);
      return section && section.getBoundingClientRect().top >= 0;
    });
    currentSectionIndex = currentSection !== -1 ? currentSection : 0;
  }

  function scrollToSection(index, duration) {
    if (index < 0 || index >= sections.length) return;
    const targetSection = document.getElementById(sections[index]);
    if (!targetSection) return; // Ensure the target section exists
    isScrolling = true;
    targetSection.scrollIntoView({ behavior: 'smooth' });
    currentSectionIndex = index;
    setTimeout(() => { isScrolling = false; }, duration); // Adjust timeout based on scroll duration
  }

  function handleScroll(event) {
    if (isScrolling) return;
    const duration = mouseScrollDuration; 
    if (event.deltaY > 0) {
      scrollToSection(currentSectionIndex + 1, duration);
    } else {
      scrollToSection(currentSectionIndex - 1, duration);
    }
  }

  function handleKeydown(event) {
    if (isScrolling) return;
    if (event.key === 'ArrowDown') {
      scrollToSection(currentSectionIndex + 1, otherScrollDuration);
    } else if (event.key === 'ArrowUp') {
      scrollToSection(currentSectionIndex - 1, otherScrollDuration);
    }
  }

  function updateCurrentSectionIndex(sectionId) {
    const index = sections.indexOf(sectionId);
    if (index !== -1) {
      currentSectionIndex = index;
    }
  }

  let touchStartY = 0;

  function handleTouchStart(event) {
    touchStartY = event.touches[0].clientY;
  }

  function handleTouchMove(event) {
    if (isScrolling) return;
    const touchMoveY = event.touches[0].clientY;
    if (touchStartY > touchMoveY + 50) {
      scrollToSection(currentSectionIndex + 1, mouseScrollDuration);
    } else if (touchStartY < touchMoveY - 50) {
      scrollToSection(currentSectionIndex - 1, mouseScrollDuration);
    }
  }

  window.addEventListener('wheel', handleScroll);
  document.addEventListener('wheel', (event) => {
    event.preventDefault(); // Prevent default scroll behavior
    handleScroll(event);
  }, { passive: false });

  document.addEventListener('keydown', handleKeydown);
  document.addEventListener('touchstart', handleTouchStart);
  document.addEventListener('touchmove', handleTouchMove);

  // Handle button clicks
  document.querySelectorAll('.LinkButton, .NavLink').forEach(link => {
    link.addEventListener('click', (event) => {
      let href = event.target.getAttribute('href') || event.target.getAttribute('data-href');
  
      // Ensure href is not null
      if (href) {
        const targetId = href.substring(1);
        const targetSection = document.getElementById(targetId);
  
        if (targetSection) {
          event.preventDefault();
          updateCurrentSectionIndex(targetId);
          scrollToSection(currentSectionIndex, otherScrollDuration);
        } else {
          // Allow default behavior for links navigating to different pages
          // Ensure the href attribute has the correct link to the target page
          window.location.href = href;
        }
      } else {
        // Handle the case where href is null, perhaps log an error or ignore the click
        console.error('The href attribute is missing or invalid for the clicked link.');
      }
    });
  });

  document.querySelectorAll('.menu-item1').forEach(link => {
    link.addEventListener('click', (event) => {
      const href = event.currentTarget.getAttribute('data-href');

      // Ensure href is not null
      if (href) {
        window.location.href = href;
      } else {
        // Handle the case where href is null, perhaps log an error or ignore the click
        console.error('The data-href attribute is missing or invalid for the clicked link.');
      }
    });
  });

  document.querySelectorAll('.image-container2').forEach(link => {
    link.addEventListener('click', (event) => {
      const href = event.currentTarget.getAttribute('data-href');

      // Ensure href is not null
      if (href) {
        const targetId = href.substring(1);
        const targetSection = document.getElementById(targetId);

        if (targetSection) {
          event.preventDefault();
          updateCurrentSectionIndex(targetId);
          scrollToSection(currentSectionIndex, otherScrollDuration);
        } else {
          // Allow default behavior for links navigating to different pages
          // Ensure the href attribute has the correct link to the target page
          window.location.href = href;
        }
      } else {
        // Handle the case where href is null, perhaps log an error or ignore the click
        console.error('The data-href attribute is missing or invalid for the clicked link.');
      }
    });
  });

  document.querySelectorAll('.menu-item').forEach(link => {
    link.addEventListener('click', (event) => {
      const href = event.currentTarget.getAttribute('data-href');

      // Ensure href is not null
      if (href) {
        const targetId = href.substring(1);
        const targetSection = document.getElementById(targetId);

        if (targetSection) {
          event.preventDefault();
          updateCurrentSectionIndex(targetId);
          scrollToSection(currentSectionIndex, otherScrollDuration);
        } else {
          // Allow default behavior for links navigating to different pages
          // Ensure the href attribute has the correct link to the target page
          window.location.href = href;
        }
      } else {
        // Handle the case where href is null, perhaps log an error or ignore the click
        console.error('The data-href attribute is missing or invalid for the clicked link.');
      }
    });
  });

  document.querySelectorAll('.image-container1').forEach(link => {
    link.addEventListener('click', (event) => {
      const href = event.currentTarget.getAttribute('data-href');

      // Ensure href is not null
      if (href) {
        const targetId = href.substring(1);
        const targetSection = document.getElementById(targetId);

        if (targetSection) {
          event.preventDefault();
          updateCurrentSectionIndex(targetId);
          scrollToSection(currentSectionIndex, otherScrollDuration);
        } else {
          // Allow default behavior for links navigating to different pages
          // Ensure the href attribute has the correct link to the target page
          window.location.href = href;
        }
      } else {
        // Handle the case where href is null, perhaps log an error or ignore the click
        console.error('The data-href attribute is missing or invalid for the clicked link.');
      }
    });
  });

  // Initialize current section index
  initializeCurrentSectionIndex();
});